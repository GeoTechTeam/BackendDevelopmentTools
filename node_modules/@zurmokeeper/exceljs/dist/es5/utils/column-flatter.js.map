{"version":3,"file":"column-flatter.js","names":["colCache","require","ColumnFlatter","constructor","input","params","_params","_sizes","_list","_rows","_getFlatList","_alignRows","_alignCells","_merges","_calcVerticalMerges","_calcHorizontalMerges","_pad","arr","num","i","push","_check","item","id","trace","meta","path","children","filter","length","child","res","index","cells","width","reduce","acc","row","Math","max","items","handled","added","k","parent","parentPos","findIndex","el","offset","cell","span","encode","depth","col","getColumns","getRows","getMerges","module","exports"],"sources":["../../../lib/utils/column-flatter.js"],"sourcesContent":["const colCache = require('./col-cache');\r\n\r\n/**\r\n * ColumnFlatter is a helper class to create sheets with nested columns.\r\n *\r\n * Based on following concepts\r\n *  - Walk through nested input structure to build flat list and tree meta information\r\n *  - Use \"leaf\" columns as physical cols and \"branch\" as merge-slots\r\n *  - Generate cell matrix and merge rules\r\n */\r\nclass ColumnFlatter {\r\n  constructor(input, params) {\r\n    this._params = params;\r\n    // id-value storage for item aggregate sizes\r\n    this._sizes = {};\r\n\r\n    // flat columns list\r\n    this._list = [];\r\n\r\n    // cells matrix storage\r\n    this._rows = [];\r\n\r\n    this._getFlatList(input);\r\n    this._alignRows(this._alignCells());\r\n\r\n    // merge rules storage\r\n    this._merges = [...this._calcVerticalMerges(), ...this._calcHorizontalMerges()];\r\n  }\r\n\r\n  /**\r\n   * Append null placeholders for entity list alignment\r\n   */\r\n  _pad(arr, num) {\r\n    if (num > 0) {\r\n      for (let i = 0; i < num; i++) {\r\n        arr.push(null);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Filters off invalid columns entries\r\n   */\r\n  _check(item) {\r\n    return item && item.id;\r\n  }\r\n\r\n  /**\r\n   * Walk through tree input.\r\n   * Build flat columns list and aggregate column size (recursive children length sum)\r\n   */\r\n  _getFlatList(input) {\r\n    const trace = (item, meta) => {\r\n      if (!this._check(item)) return;\r\n\r\n      const path = [...meta.path, item.id];\r\n      const children = (item.children || []).filter(this._check);\r\n\r\n      if (children.length && children.length > 1) {\r\n        for (const id of path) {\r\n          if (!this._sizes[id]) {\r\n            this._sizes[id] = 0;\r\n          }\r\n\r\n          this._sizes[id] += children.length - 1;\r\n        }\r\n\r\n        for (const child of children) {\r\n          trace(child, {path});\r\n        }\r\n      }\r\n\r\n      this._list.push({\r\n        meta,\r\n        ...(children.length === 1 ? children[0] : item),\r\n      });\r\n    };\r\n\r\n    for (const item of input) {\r\n      trace(item, {path: []});\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Align with cells with null-ish appending\r\n   * by aggregated size num\r\n   */\r\n  _alignCells() {\r\n    const res = [];\r\n\r\n    for (const item of this._list) {\r\n      const index = item.meta.path.length;\r\n\r\n      if (!res[index]) {\r\n        res[index] = [];\r\n      }\r\n\r\n      res[index].push(item);\r\n\r\n      if (item.children) {\r\n        this._pad(res[index], this._sizes[item.id]);\r\n      }\r\n    }\r\n\r\n    return res;\r\n  }\r\n\r\n  /**\r\n   * Align cell groups in rows according\r\n   * parent cell position\r\n   */\r\n  _alignRows(cells) {\r\n    const width = cells.reduce((acc, row) => Math.max(acc, row.length), 0);\r\n\r\n    for (let i = 0; i < cells.length; i++) {\r\n      const row = cells[i];\r\n\r\n      if (!i) {\r\n        this._rows.push(row);\r\n      } else {\r\n        const items = [];\r\n        const handled = {};\r\n        let added = 0;\r\n\r\n        for (let k = 0; k < width; k++) {\r\n          const item = row[k];\r\n\r\n          if (k + added >= width) {\r\n            break;\r\n          }\r\n\r\n          if (item) {\r\n            const {path} = item.meta;\r\n            const parent = path[path.length - 1];\r\n\r\n            if (parent) {\r\n              const parentPos = this._rows[i - 1].findIndex(el => (el || {}).id === parent);\r\n              const offset = parentPos - (k + added);\r\n\r\n              if (offset > 0 && !handled[parent]) {\r\n                added += offset;\r\n\r\n                this._pad(items, offset);\r\n\r\n                handled[parent] = true;\r\n              }\r\n            }\r\n          }\r\n\r\n          items.push(item || null);\r\n        }\r\n\r\n        this._rows.push(items);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculates horizontal merge rules\r\n   *\r\n   * Walks width-through rows collecting ranges with cell index and its recursive size\r\n   */\r\n  _calcHorizontalMerges() {\r\n    const res = [];\r\n\r\n    for (let i = 0; i < this._rows.length; i++) {\r\n      const cells = this._rows[i];\r\n\r\n      for (let k = 0; k < cells.length; k++) {\r\n        const cell = cells[k];\r\n        const span = cell && this._sizes[cell.id];\r\n\r\n        if (span) {\r\n          const row = i + 1;\r\n\r\n          res.push(colCache.encode(row, k + 1, row, k + span + 1));\r\n        }\r\n      }\r\n    }\r\n\r\n    return res;\r\n  }\r\n\r\n  /**\r\n   * Calculates vertical merge rules\r\n   *\r\n   * Walks deep-through rows looking for non-empty cell in row\r\n   */\r\n  _calcVerticalMerges() {\r\n    const depth = this._rows.length - 1;\r\n    const width = this._rows[0].length;\r\n    const res = [];\r\n\r\n    for (let i = 0; i < width; i++) {\r\n      for (let k = depth; k >= 0; k--) {\r\n        if (this._rows[k][i]) {\r\n          const col = i + 1;\r\n\r\n          if (k !== depth) {\r\n            res.push(colCache.encode(k + 1, col, depth + 1, col));\r\n          }\r\n\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    return res;\r\n  }\r\n\r\n  /**\r\n   * Collect \"leaf\" columns\r\n   *\r\n   * Filter off all cells with \"children\" property\r\n   */\r\n  getColumns() {\r\n    const res = [];\r\n\r\n    for (const item of this._list) {\r\n      if (!item.children) {\r\n        res.push({\r\n          id: item.id,\r\n          ...item,\r\n        });\r\n      }\r\n    }\r\n\r\n    return res;\r\n  }\r\n\r\n  /**\r\n   * Cells matrix getter\r\n   */\r\n  getRows() {\r\n    return this._rows;\r\n  }\r\n\r\n  /**\r\n   * Merge rules getter\r\n   */\r\n  getMerges() {\r\n    return this._merges;\r\n  }\r\n}\r\n\r\nmodule.exports = ColumnFlatter;\r\n"],"mappings":"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"}